一、创建数据库
    MongoDB 创建数据库的语法格式如下：
    use DATABASE_NAME
    如果数据库不存在，则创建数据库，否则切换到指定数据库。

    如果你想查看所有数据库，可以使用 show dbs 命令：

二、删除数据库
    MongoDB 删除数据库的语法格式如下：
    db.dropDatabase()
    删除当前数据库，默认为 test，你可以使用 db 命令查看当前数据库名。

    删除集合
        集合删除语法格式如下：
        db.collection.drop()
三、创建集合
    MongoDB 中使用 createCollection() 方法来创建集合。
    语法格式：
    db.createCollection(name, options)
    参数说明：
        name: 要创建的集合名称
        options: 可选参数, 指定有关内存大小及索引的选项

    options 可以是如下参数：
    字段	     类型	        描述
    capped	     布尔	（可选）如果为 true，则创建固定集合。固定集合是指有着固定大小的集合，当达到最大值时，它会自动覆盖最早的文档。
                          当该值为 true 时，必须指定 size 参数。
    autoIndexId	 布尔	（可选）如为 true，自动在 _id 字段创建索引。默认为 false。
    size	     数值	（可选）为固定集合指定一个最大值（以字节计）。
                          如果 capped 为 true，也需要指定该字段。
    max	         数值	（可选）指定固定集合中包含文档的最大数量。
                          在插入文档时，MongoDB 首先检查固定集合的 size 字段，然后检查 max 字段。

    例子：
        创建固定集合 mycol，整个集合空间大小 6142800 KB, 文档最大个数为 10000 个。
        > db.createCollection("mycol", { capped : true, autoIndexId : true, size : 6142800, max : 10000 } )

    如果要查看已有集合，可以使用 show collections 命令：
        > show collections

    在 MongoDB 中，你不需要创建集合。当你插入一些文档时，MongoDB 会自动创建集合。
        > db.mycol2.insert({"name" : "菜鸟教程"})
        > show collections
        mycol2...

四、删除集合
    MongoDB 中使用 drop() 方法来删除集合。
    语法格式：
    db.collection.drop()

五、插入文档
    MongoDB 使用 insert() 或 save() 方法向集合中插入文档，语法如下：
    db.COLLECTION_NAME.insert(document)

    实例:
        >db.col.insert({title: 'MongoDB 教程',
            description: 'MongoDB 是一个 Nosql 数据库',
            by: '菜鸟教程',
            url: 'http://www.runoob.com',
            tags: ['mongodb', 'database', 'NoSQL'],
            likes: 100
        })
        或者
        > document=({title: 'MongoDB 教程',
            description: 'MongoDB 是一个 Nosql 数据库',
            by: '菜鸟教程',
            url: 'http://www.runoob.com',
            tags: ['mongodb', 'database', 'NoSQL'],
            likes: 100
        });
        db.col.insert(document)
    插入文档你也可以使用 db.col.save(document) 命令。如果不指定 _id 字段 save() 方法类似于 insert() 方法。如果指定 _id 字段，则会更新该 _id 的数据。

    增加：
    3.2 版本后还有以下几种语法可用于插入文档:
    db.collection.insertOne():向指定集合中插入一条文档数据
    db.collection.insertMany():向指定集合中插入多条文档数据
    #  插入单条数据
        > var document = db.collection.insertOne({"a": 3})
    #  插入多条数据
        > var res = db.collection.insertMany([{"b": 3}, {'c': 4}])

六、 更新文档
    MongoDB 使用 update() 和 save() 方法来更新集合中的文档。接下来让我们详细来看下两个函数的应用及其区别。

    1、update() 方法
        db.collection.update(
           <query>,
           <update>,
           {
             upsert: <boolean>,
             multi: <boolean>,
             writeConcern: <document>
           }
        )
        参数说明：
            query : update的查询条件，类似sql update查询内where后面的。
            update : update的对象和一些更新的操作符（如$,$inc...）等，也可以理解为sql update查询内set后面的
            upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。
            multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。
            writeConcern :可选，抛出异常的级别。
        例子：
            db.col.update({'title':'MongoDB 教程'},{$set:{'title':'MongoDB'}})
            db.col.find().pretty()

    2、save() 方法
        db.collection.save(
           <document>,
           {
             writeConcern: <document>
           }
        )
        参数说明：
            document : 文档数据。
            writeConcern :可选，抛出异常的级别。

    增加：
    在3.2版本开始，MongoDB提供以下更新集合文档的方法：
    db.collection.updateOne() 向指定集合更新单个文档
    db.collection.updateMany() 向指定集合更新多个文档
    例子：
    更新单个文档
        > db.test_collection.updateOne({"name":"abc"},{$set:{"age":"28"}})
        { "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }
    更新多个文档
        > db.test_collection.updateMany({"age":{$gt:"10"}},{$set:{"status":"xyz"}})
        { "acknowledged" : true, "matchedCount" : 3, "modifiedCount" : 3 }

七、删除文档
    MongoDB remove()函数是用来移除集合中的数据。
    MongoDB数据更新可以使用update()函数。在执行remove()函数前先执行find()命令来判断执行的条件是否正确，这是一个比较好的习惯。
    语法：
        db.collection.remove(
           <query>,
           <justOne>
        )
    如果你的 MongoDB 是 2.6 版本以后的，语法格式如下：
        db.collection.remove(
           <query>,
           {
             justOne: <boolean>,
             writeConcern: <document>
           }
        )
    参数说明：
        query :（可选）删除的文档的条件。
        justOne : （可选）如果设为 true 或 1，则只删除一个文档。
        writeConcern :（可选）抛出异常的级别。

    例子：
        >db.col.remove({'title':'MongoDB 教程'})
        如果你只想删除第一条找到的记录可以设置 justOne 为 1，如下所示：
        >db.COLLECTION_NAME.remove(DELETION_CRITERIA,1)

    如果你想删除所有数据，可以使用以下方式（类似常规 SQL 的 truncate 命令）：
        >db.col.remove({})

    增加：
    remove() 方法已经过时了，现在官方推荐使用 deleteOne() 和 deleteMany() 方法。
        如删除集合下全部文档：
        db.inventory.deleteMany({})
        删除 status 等于 A 的全部文档：
        db.inventory.deleteMany({ status : "A" })
        删除 status 等于 D 的一个文档：
        db.inventory.deleteOne( { status: "D" } )

八、查询文档
    语法
    db.collection.find(query, projection)
    query ：可选，使用查询操作符指定查询条件
    projection ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。
        若不指定 projection，则默认返回所有键，指定 projection 格式如下，有两种模式
        db.collection.find(query, {title: 1, by: 1}) // inclusion模式 指定返回的键，不返回其他键
        db.collection.find(query, {title: 0, by: 0}) // exclusion模式 指定不返回的键,返回其他键
        _id 键默认返回，需要主动指定 _id:0 才会隐藏
        两种模式不可混用（因为这样的话无法推断其他键是否应返回）

    如果你需要以易读的方式来读取数据，可以使用 pretty() 方法，语法格式如下：
    >db.col.find().pretty()
    pretty() 方法以格式化的方式来显示所有文档。

    除了 find() 方法之外，还有一个 findOne() 方法，它只返回一个文档。

    1、MongoDB 与 RDBMS Where 语句比较
        操作	        格式	                        范例	                          RDBMS中的类似语句
        等于	    {<key>:<value>}       	db.col.find({"by":"菜鸟教程"}).pretty()	    where by = '菜鸟教程'
        小于	    {<key>:{$lt:<value>}}	db.col.find({"likes":{$lt:50}}).pretty()	where likes < 50
        小于或等于	{<key>:{$lte:<value>}}	db.col.find({"likes":{$lte:50}}).pretty()	where likes <= 50
        大于	    {<key>:{$gt:<value>}}	db.col.find({"likes":{$gt:50}}).pretty()	where likes > 50
        大于或等于	{<key>:{$gte:<value>}}	db.col.find({"likes":{$gte:50}}).pretty()	where likes >= 50
        不等于	    {<key>:{$ne:<value>}}	db.col.find({"likes":{$ne:50}}).pretty()	where likes != 50

    2、MongoDB AND 条件
        MongoDB 的 find() 方法可以传入多个键(key)，每个键(key)以逗号隔开，即常规 SQL 的 AND 条件。
        语法格式如下：
        >db.col.find({key1:value1, key2:value2}).pretty()

    3、MongoDB OR 条件
         MongoDB OR 条件语句使用了关键字 $or,语法格式如下：
         >db.col.find(
            {
               $or: [
                  {key1: value1}, {key2:value2}
               ]
            }
         ).pretty()

九、条件操作符
    MongoDB中条件操作符有：
    (>) 大于 - $gt
    (<) 小于 - $lt
    (>=) 大于等于 - $gte
    (<= ) 小于等于 - $lte

十、$type 操作符
    MongoDB 中可以使用的类型如下表所示：
        类型	              数字	    备注
        Double	                1
        String                  2
        Object	                3
        Array	                4
        Binary data         	5
        Undefined	            6	    已废弃。
        Object id	            7
        Boolean	                8
        Date	                9
        Null	                10
        Regular Expression	    11
        JavaScript	            13
        Symbol              	14
        JavaScript (with scope)	15
        32-bit integer	        16
        Timestamp	            17
        64-bit integer	        18
        Min key	255	Query with  -1.
        Max key	                127

    如果想获取 "col" 集合中 title 为 String 的数据，你可以使用以下命令：
    db.col.find({"title" : {$type : 2}})

十一、Limit与Skip方法
    limit()方法基本语法如下所示：
    >db.COLLECTION_NAME.find().limit(NUMBER)

    skip() 方法脚本语法格式如下：
    >db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)
    注:skip()方法默认参数为 0 。

十二、排序
    在 MongoDB 中使用 sort() 方法对数据进行排序，sort() 方法可以通过参数指定排序的字段，
    并使用 1 和 -1 来指定排序的方式，其中 1 为升序排列，而 -1 是用于降序排列。

    sort()方法基本语法如下所示：
    >db.COLLECTION_NAME.find().sort({KEY:1})

    skip(), limilt(), sort()三个放在一起执行的时候，执行的顺序是先 sort(), 然后是 skip()，最后是显示的 limit()。

十三、索引
    索引通常能够极大的提高查询的效率，如果没有索引，MongoDB在读取数据时必须扫描集合中的每个文件并选取那些符合查询条件的记录。
    这种扫描全集合的查询效率是非常低的，特别在处理大量的数据时，查询可以要花费几十秒甚至几分钟，这对网站的性能是非常致命的。
    索引是特殊的数据结构，索引存储在一个易于遍历读取的数据集合中，索引是对数据库表中一列或多列的值进行排序的一种结构。

    MongoDB使用 createIndex() 方法来创建索引。
    注意在 3.0.0 版本前创建索引方法为 db.collection.ensureIndex()，之后的版本使用了 db.collection.createIndex() 方法，
    ensureIndex() 还能用，但只是 createIndex() 的别名。

    createIndex()方法基本语法格式如下所示：
    >db.collection.createIndex(keys, options)
    语法中 Key 值为你要创建的索引字段，1 为指定按升序创建索引，如果你想按降序来创建索引指定为 -1 即可。

    createIndex() 方法中你也可以设置使用多个字段创建索引（关系型数据库中称作复合索引），逗号分隔。

    createIndex() 接收可选参数，可选参数列表如下：
        Parameter	        Type	    Description
        background	        Boolean	    建索引过程会阻塞其它数据库操作，background可指定以后台方式创建索引，即增加 "background" 可选参数。 "background" 默认值为false。
        unique	            Boolean	    建立的索引是否唯一。指定为true创建唯一索引。默认值为false.
        name	            string	    索引的名称。如果未指定，MongoDB的通过连接索引的字段名和排序顺序生成一个索引名称。
        dropDups	        Boolean	    在建立唯一索引时是否删除重复记录,指定 true 创建唯一索引。默认值为 false.
        sparse	            Boolean	    对文档中不存在的字段数据不启用索引；这个参数需要特别注意，如果设置为true的话，在索引字段中不会查询出不包含对应字段的文档.。默认值为 false.
        expireAfterSeconds	integer	    指定一个以秒为单位的数值，完成 TTL设定，设定集合的生存时间。
        v	                index version	索引的版本号。默认的索引版本取决于mongod创建索引时运行的版本。
        weights	            document	索引权重值，数值在 1 到 99,999 之间，表示该索引相对于其他索引字段的得分权重。
        default_language	string	    对于文本索引，该参数决定了停用词及词干和词器的规则的列表。 默认为英语
        language_override	string	    对于文本索引，该参数指定了包含在文档中的字段名，语言覆盖默认的language，默认值为 language.

十四、聚合
    ongoDB中聚合的方法使用aggregate()。
    aggregate() 方法的基本语法格式如下所示：
    >db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)

    例子：
    > db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$sum : 1}}}])
    以上实例类似sql语句： select by_user, count(*) from mycol group by by_user

    下表展示了一些聚合的表达式:
        表达式	  描述	                                         实例
        $sum	  计算总和。	                          db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$sum : "$likes"}}}])
        $avg	  计算平均值	                          db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$avg : "$likes"}}}])
        $min	  获取集合中所有文档对应值得最小值。	  db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$min : "$likes"}}}])
        $max	  获取集合中所有文档对应值得最大值。	  db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$max : "$likes"}}}])
        $push	  在结果文档中插入值到一个数组中。	      db.mycol.aggregate([{$group : {_id : "$by_user", url : {$push: "$url"}}}])
        $addToSet 在结果文档中插入值到一个数组中，但不创建副本。	db.mycol.aggregate([{$group : {_id : "$by_user", url : {$addToSet : "$url"}}}])
        $first	  根据资源文档的排序获取第一个文档数据。  db.mycol.aggregate([{$group : {_id : "$by_user", first_url : {$first : "$url"}}}])
        $last	  根据资源文档的排序获取最后一个文档数据  db.mycol.aggregate([{$group : {_id : "$by_user", last_url : {$last : "$url"}}}])

    管道操作符实例
    1、$project实例
        db.article.aggregate(
            { $project : {
                title : 1 ,
                author : 1 ,
            }}
         );
        这样的话结果中就只还有_id,tilte和author三个字段了，默认情况下_id字段是被包含的，如果要想不包含_id话可以这样:
        db.article.aggregate(
            { $project : {
                _id : 0 ,
                title : 1 ,
                author : 1
            }});
    2.$match实例
        db.articles.aggregate( [
                                { $match : { score : { $gt : 70, $lte : 90 } } },
                                { $group: { _id: null, count: { $sum: 1 } } }
                               ] );
        $match用于获取分数大于70小于或等于90记录，然后将符合条件的记录送到下一阶段$group管道操作符进行处理。
    3.$skip实例
        db.article.aggregate(
            { $skip : 5 });
        经过$skip管道操作符处理后，前五个文档被"过滤"掉。