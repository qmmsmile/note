一、固定集合
    MongoDB 固定集合（Capped Collections）是性能出色且有着固定大小的集合，对于大小固定，我们可以想象其就像一个环形队列，
    当集合空间用完后，再插入的元素就会覆盖最初始的头部的元素！

    1、创建固定集合
        我们通过createCollection来创建一个固定集合，且capped选项设置为true：
        >db.createCollection("cappedLogCollection",{capped:true,size:10000})
        还可以指定文档个数,加上max:1000属性：
        >db.createCollection("cappedLogCollection",{capped:true,size:10000,max:1000})
        size 是整个集合空间大小，单位为【KB】
        max 是集合文档个数上线，单位是【个】
        如果空间大小到达上限，则插入下一个文档时，会覆盖第一个文档；如果文档个数到达上限，同样插入下一个文档时，会覆盖第一个文档。两个参数上限判断取的是【与】的逻辑。

        判断集合是否为固定集合:
        >db.cappedLogCollection.isCapped()
        如果需要将已存在的集合转换为固定集合可以使用以下命令：
        >db.runCommand({"convertToCapped":"posts",size:10000})
        以上代码将我们已存在的 posts 集合转换为固定集合。

    2、固定集合查询
        固定集合文档按照插入顺序储存的,默认情况下查询就是按照插入顺序返回的,也可以使用$natural调整返回顺序。
        >db.cappedLogCollection.find().sort({$natural:-1})

    3、固定集合的功能特点
        可以插入及更新,但更新不能超出collection的大小,否则更新失败,不允许删除,但是可以调用drop()删除集合中的所有行,但是drop后需要显式地重建集合。
        在32位机子上一个cappped collection的最大值约为482.5M,64位上只受系统文件大小的限制。

    4、固定集合属性及用法
        属性：
            属性1:对固定集合进行插入速度极快
            属性2:按照插入顺序的查询输出速度极快
            属性3:能够在插入最新数据时,淘汰最早的数据
        用法：
            用法1:储存日志信息
            用法2:缓存一些少量的文档

二、自动增长
    MongoDB 没有像 SQL 一样有自动增长的功能， MongoDB 的 _id 是系统自动生成的12字节唯一标识。
    但在某些情况下，我们可能需要实现 ObjectId 自动增长功能。
    由于 MongoDB 没有实现这个功能，我们可以通过编程的方式来实现，以下我们将在 counters 集合中实现_id字段自动增长。

    1、使用 counters 集合
        考虑以下 products 文档。我们希望 _id 字段实现 从 1,2,3,4 到 n 的自动增长功能。
        {
          "_id":1,
          "product_name": "Apple iPhone",
          "category": "mobiles"
        }
        为此，创建 counters 集合，序列字段值可以实现自动长：
        >db.createCollection("counters")
        现在我们向 counters 集合中插入以下文档，使用 productid 作为 key:
        {
          "_id":"productid",
          "sequence_value": 0
        }
        sequence_value 字段是序列通过自动增长后的一个值。
        使用以下命令插入 counters 集合的序列文档中：
        >db.counters.insert({_id:"productid",sequence_value:0})

    2、创建 Javascript 函数
        现在，我们创建函数getNextSequenceValue来作为序列名的输入，指定的序列会自动增长1并返回最新序列值。在本文的实例中序列名为 productid 。
        >function getNextSequenceValue(sequenceName){
           var sequenceDocument = db.counters.findAndModify(
              {
                 query:{_id: sequenceName },
                 update: {$inc:{sequence_value:1}},
                 "new":true
              });
           return sequenceDocument.sequence_value;
        }

    3、使用 Javascript 函数
        接下来我们将使用 getNextSequenceValue 函数创建一个新的文档， 并设置文档 _id 自动为返回的序列值：
        >db.products.insert({
           "_id":getNextSequenceValue("productid"),
           "product_name":"Apple iPhone",
           "category":"mobiles"})
        >db.products.insert({
           "_id":getNextSequenceValue("productid"),
           "product_name":"Samsung S3",
           "category":"mobiles"})
        就如你所看到的，我们使用 getNextSequenceValue 函数来设置 _id 字段。
        为了验证函数是否有效，我们可以使用以下命令读取文档：
        >db.products.find()
        以上命令将返回以下结果，我们发现 _id 字段是自增长的：
        { "_id" : 1, "product_name" : "Apple iPhone", "category" : "mobiles"}
        { "_id" : 2, "product_name" : "Samsung S3", "category" : "mobiles" }
