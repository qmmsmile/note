一、ObjectId
    ObjectId 是一个12字节 BSON 类型数据，有以下格式：
        前4个字节表示时间戳
        接下来的3个字节是机器标识码
        紧接的两个字节由进程id组成（PID）
        最后三个字节是随机数。
    MongoDB中存储的文档必须有一个"_id"键。这个键的值可以是任何类型的，默认是个ObjectId对象。
    在一个集合里面，每个文档都有唯一的"_id"值，来确保集合里面每个文档都能被唯一标识。
    MongoDB采用ObjectId，而不是其他比较常规的做法（比如自动增加的主键）的主要原因，因为在多个服务器上同步自动增加主键值既费力还费时。

    1、创建新的ObjectId
        使用以下代码生成新的ObjectId：
        >newObjectId = ObjectId()
        上面的语句返回以下唯一生成的id：
        ObjectId("5349b4ddd2781d08c09890f3")
        你也可以使用生成的id来取代MongoDB自动生成的ObjectId：
        >myObjectId = ObjectId("5349b4ddd2781d08c09890f4")

    2、创建文档的时间戳
        由于 ObjectId 中存储了 4 个字节的时间戳，所以你不需要为你的文档保存时间戳字段，你可以通过 getTimestamp 函数来获取文档的创建时间:
        >ObjectId("5349b4ddd2781d08c09890f4").getTimestamp()
        以上代码将返回 ISO 格式的文档创建时间：
        ISODate("2014-04-12T21:49:17Z")
    3、ObjectId 转换为字符串
        在某些情况下，您可能需要将ObjectId转换为字符串格式。你可以使用下面的代码：
        >new ObjectId().str
        以上代码将返回Guid格式的字符串：：
        5349b4ddd2781d08c09890f3

二、Map Reduce
    Map-Reduce是一种计算模型，简单的说就是将大批量的工作（数据）分解（MAP）执行，然后再将结果合并成最终结果（REDUCE）。
    MongoDB提供的Map-Reduce非常灵活，对于大规模数据分析也相当实用。
    1、MapReduce 命令
        以下是MapReduce的基本语法：
        >db.collection.mapReduce(
           function() {emit(key,value);},  //map 函数
           function(key,values) {return reduceFunction},   //reduce 函数
           {
              out: collection,
              query: document,
              sort: document,
              limit: number
           }
        )
        使用 MapReduce 要实现两个函数 Map 函数和 Reduce 函数,Map 函数调用 emit(key, value), 遍历 collection 中所有的记录, 将 key 与 value 传递给 Reduce 函数进行处理。
        Map 函数必须调用 emit(key, value) 返回键值对。

        参数说明:
            map ：映射函数 (生成键值对序列,作为 reduce 函数参数)。
            reduce 统计函数，reduce函数的任务就是将key-values变成key-value，也就是把values数组变成一个单一的值value。。
            out 统计结果存放集合 (不指定则使用临时集合,在客户端断开后自动删除)。
            query 一个筛选条件，只有满足条件的文档才会调用map函数。（query。limit，sort可以随意组合）
            sort 和limit结合的sort排序参数（也是在发往map函数前给文档排序），可以优化分组机制
            limit 发往map函数的文档数量的上限（要是没有limit，单独使用sort的用处不大）
            以下实例在集合 orders 中查找 status:"A" 的数据，并根据 cust_id 来分组，并计算 amount 的总和。

三、全文检索
    1、启用全文检索
        MongoDB 在 2.6 版本以后是默认开启全文检索的，如果你使用之前的版本，你需要使用以下代码来启用全文检索:
        >db.adminCommand({setParameter:true,textSearchEnabled:true})
        或者使用命令：
        mongod --setParameter textSearchEnabled=true

    2、创建全文索引
        考虑以下 posts 集合的文档数据，包含了文章内容（post_text）及标签(tags)：
        {
           "post_text": "enjoy the mongodb articles on Runoob",
           "tags": [
              "mongodb",
              "runoob"
           ]
        }
        我们可以对 post_text 字段建立全文索引，这样我们可以搜索文章内的内容：
        >db.posts.ensureIndex({post_text:"text"})

    3、使用全文索引
        现在我们已经对 post_text 建立了全文索引，我们可以搜索文章中的关键词 runoob：
        >db.posts.find({$text:{$search:"runoob"}})
        以下命令返回了如下包含 runoob 关键词的文档数据：
        {
           "_id" : ObjectId("53493d14d852429c10000002"),
           "post_text" : "enjoy the mongodb articles on Runoob",
           "tags" : [ "mongodb", "runoob" ]
        }
        如果你使用的是旧版本的 MongoDB，你可以使用以下命令：
        >db.posts.runCommand("text",{search:"runoob"})
        使用全文索引可以提高搜索效率。

    4、删除全文索引
        删除已存在的全文索引，可以使用 find 命令查找索引名：
        >db.posts.getIndexes()
        通过以上命令获取索引名，本例的索引名为post_text_text，执行以下命令来删除索引：
        >db.posts.dropIndex("post_text_text")

四、正则表达式
    正则表达式是使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。
    许多程序设计语言都支持利用正则表达式进行字符串操作。
    MongoDB 使用 $regex 操作符来设置匹配字符串的正则表达式。
    MongoDB使用PCRE (Perl Compatible Regular Expression) 作为正则表达式语言。
    不同于全文检索，我们使用正则表达式不需要做任何配置。
    考虑以下 posts 集合的文档结构，该文档包含了文章内容和标签：
    {
       "post_text": "enjoy the mongodb articles on runoob",
       "tags": [
          "mongodb",
          "runoob"
       ]
    }
    1、使用正则表达式
        以下命令使用正则表达式查找包含 runoob 字符串的文章：
        >db.posts.find({post_text:{$regex:"runoob"}})
        以上查询也可以写为：
        >db.posts.find({post_text:/runoob/})

    2、不区分大小写的正则表达式
        如果检索需要不区分大小写，我们可以设置 $options 为 $i。
        以下命令将查找不区分大小写的字符串 runoob：
        >db.posts.find({post_text:{$regex:"runoob",$options:"$i"}})
        集合中会返回所有包含字符串 runoob 的数据，且不区分大小写：
        {
           "_id" : ObjectId("53493d37d852429c10000004"),
           "post_text" : "hey! this is my post on  runoob",
           "tags" : [ "runoob" ]
        }

    3、数组元素使用正则表达式
        我们还可以在数组字段中使用正则表达式来查找内容。这在标签的实现上非常有用，如果你需要查找包含以run开头的标签数据(ru或run或runoob)，你可以使用以下代码：
        >db.posts.find({tags:{$regex:"run"}})

    4、优化正则表达式查询
        如果你的文档中字段设置了索引，那么使用索引相比于正则表达式匹配查找所有的数据查询速度更快。
        如果正则表达式是前缀表达式，所有匹配的数据将以指定的前缀字符串为开始。例如：如果正则表达式为 ^tut ，查询语句将查找以tut为开头的字符串。
        这里面使用正则表达式有两点需要注意：
            正则表达式中使用变量。一定要使用eval将组合的字符串进行转换，不能直接将字符串拼接后传入给表达式。否则没有报错信息，只是结果为空！实例如下：
            var name=eval("/" + 变量值key +"/i");
            以下是模糊查询包含title关键词, 且不区分大小写:
            title:eval("/"+title+"/i")    // 等同于 title:{$regex:title,$Option:"$i"}

五、GridFS
    GridFS 用于存储和恢复那些超过16M（BSON文件限制）的文件(如：图片、音频、视频等)。
    GridFS 也是文件存储的一种方式，但是它是存储在MonoDB的集合中。
    GridFS 可以更好的存储大于16M的文件。
    GridFS 会将大文件对象分割成多个小的chunk(文件片段),一般为256k/个,每个chunk将作为MongoDB的一个文档(document)被存储在chunks集合中。
    GridFS 用两个集合来存储一个文件：fs.files与fs.chunks。
    每个文件的实际内容被存在chunks(二进制数据)中,和文件有关的meta数据(filename,content_type,还有用户自定义的属性)将会被存在files集合中。

    以下是简单的 fs.files 集合文档：
    {
       "filename": "test.txt",
       "chunkSize": NumberInt(261120),
       "uploadDate": ISODate("2014-04-13T11:32:33.557Z"),
       "md5": "7b762939321e146569b07f72c62cca4f",
       "length": NumberInt(646)
    }
    以下是简单的 fs.chunks 集合文档：
    {
       "files_id": ObjectId("534a75d19f54bfec8a2fe44b"),
       "n": NumberInt(0),
       "data": "Mongo Binary Data"
    }

    GridFS 添加文件
    现在我们使用 GridFS的put命令来存储mp3文件。调用 MongoDB 安装目录下bin的 mongofiles.exe工具。
    打开命令提示符，进入到MongoDB的安装目录的bin目录中，找到mongofiles.exe，并输入下面的代码：
    >mongofiles.exe -d gridfs put song.mp3
    GridFS 是存储文件的数据名称。如果不存在该数据库，MongoDB会自动创建。Song.mp3 是音频文件名。
    使用以下命令来查看数据库中文件的文档：
    >db.fs.files.find()
    以上命令执行后返回以下文档数据：
    {
       _id: ObjectId('534a811bf8b4aa4d33fdf94d'),
       filename: "song.mp3",
       chunkSize: 261120,
       uploadDate: new Date(1397391643474), md5: "e4f53379c909f7bed2e9d631e15c1c41",
       length: 10401959
    }
    我们可以看到 fs.chunks 集合中所有的区块，以下我们得到了文件的 _id 值，我们可以根据这个 _id 获取区块(chunk)的数据：

    >db.fs.chunks.find({files_id:ObjectId('534a811bf8b4aa4d33fdf94d')})
    以上实例中，查询返回了 40 个文档的数据，意味着mp3文件被存储在40个区块中。