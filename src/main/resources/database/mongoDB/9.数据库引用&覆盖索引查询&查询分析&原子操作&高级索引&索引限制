一、数据库索引
    MongoDB 引用有两种：
        手动引用（Manual References）
        DBRefs

    1、DBRefs vs 手动引用
    考虑这样的一个场景，我们在不同的集合中 (address_home, address_office, address_mailing, 等)存储不同的地址（住址，办公室地址，邮件地址等）。
    这样，我们在调用不同地址时，也需要指定集合，一个文档从多个集合引用文档，我们应该使用 DBRefs。

    2、使用 DBRefs
        DBRef的形式：{ $ref : , $id : , $db :  }
        三个字段表示的意义为：
            $ref：集合名称
            $id：引用的id
            $db:数据库名称，可选参数
        以下实例中用户数据文档使用了 DBRef, 字段 address：
        {
           "_id":ObjectId("53402597d852426020000002"),
           "address": {
           "$ref": "address_home",
           "$id": ObjectId("534009e4d852427820000002"),
           "$db": "runoob"},
           "contact": "987654321",
           "dob": "01-01-1991",
           "name": "Tom Benzamin"
        }
        address DBRef 字段指定了引用的地址文档是在 runoob 数据库下的 address_home 集合，id 为 534009e4d852427820000002。

        以下代码中，我们通过指定 $ref 参数（address_home 集合）来查找集合中指定id的用户地址信息：
            >var user = db.users.findOne({"name":"Tom Benzamin"})
            >var dbRef = user.address
            >db[dbRef.$ref].findOne({"_id":(dbRef.$id)})
        以上实例返回了 address_home 集合中的地址数据：
        {
           "_id" : ObjectId("534009e4d852427820000002"),
           "building" : "22 A, Indiana Apt",
           "pincode" : 123456,
           "city" : "Los Angeles",
           "state" : "California"
        }

二、覆盖索引查询
    官方的MongoDB的文档中说明，覆盖查询是以下的查询：
        所有的查询字段是索引的一部分
        所有的查询返回字段在同一个索引中
    由于所有出现在查询中的字段是索引的一部分， MongoDB 无需在整个数据文档中检索匹配查询条件和返回使用相同索引的查询结果。
    因为索引存在于RAM中，从索引中获取数据比通过扫描文档读取数据要快得多。

    使用覆盖索引查询
    为了测试覆盖索引查询，使用以下 users 集合:
    {
       "_id": ObjectId("53402597d852426020000002"),
       "contact": "987654321",
       "dob": "01-01-1991",
       "gender": "M",
       "name": "Tom Benzamin",
       "user_name": "tombenzamin"
    }
    我们在 users 集合中创建联合索引，字段为 gender 和 user_name :
    >db.users.ensureIndex({gender:1,user_name:1})
    现在，该索引会覆盖以下查询：
    >db.users.find({gender:"M"},{user_name:1,_id:0})
    也就是说，对于上述查询，MongoDB的不会去数据库文件中查找。相反，它会从索引中提取数据，这是非常快速的数据查询。
    由于我们的索引中不包括 _id 字段，_id在查询中会默认返回，我们可以在MongoDB的查询结果集中排除它。

    下面的实例没有排除_id，查询就不会被覆盖：
    >db.users.find({gender:"M"},{user_name:1})

    最后，如果是以下的查询，不能使用覆盖索引查询：
        所有索引字段是一个数组
        所有索引字段是一个子文档

三、查询分析
    MongoDB 查询分析可以确保我们建议的索引是否有效，是查询语句性能分析的重要工具。
    MongoDB 查询分析常用函数有：explain() 和 hint()。

    1、使用 explain()
        explain 操作提供了查询信息，使用索引及查询统计等。有利于我们对索引的优化。
        接下来我们在 users 集合中创建 gender 和 user_name 的索引：
        >db.users.ensureIndex({gender:1,user_name:1})
        现在在查询语句中使用 explain ：
        >db.users.find({gender:"M"},{user_name:1,_id:0}).explain()
        以上的 explain() 查询返回如下结果：
        {
           "cursor" : "BtreeCursor gender_1_user_name_1",
           "isMultiKey" : false,
           "n" : 1,
           "nscannedObjects" : 0,
           "nscanned" : 1,
           "nscannedObjectsAllPlans" : 0,
           "nscannedAllPlans" : 1,
           "scanAndOrder" : false,
           "indexOnly" : true,
           "nYields" : 0,
           "nChunkSkips" : 0,
           "millis" : 0,
           "indexBounds" : {
              "gender" : [
                 [
                    "M",
                    "M"
                 ]
              ],
              "user_name" : [
                 [
                    {
                       "$minElement" : 1
                    },
                    {
                       "$maxElement" : 1
                    }
                 ]
              ]
           }
        }
        现在，我们看看这个结果集的字段：

        indexOnly: 字段为 true ，表示我们使用了索引。
        cursor：因为这个查询使用了索引，MongoDB 中索引存储在B树结构中，所以这是也使用了 BtreeCursor 类型的游标。如果没有使用索引，
                游标的类型是 BasicCursor。这个键还会给出你所使用的索引的名称，你通过这个名称可以查看当前数据库下的system.indexes集合
                （系统自动创建，由于存储索引信息，这个稍微会提到）来得到索引的详细信息。
        n：当前查询返回的文档数量。
        nscanned/nscannedObjects：表明当前这次查询一共扫描了集合中多少个文档，我们的目的是，让这个数值和返回文档的数量越接近越好。
        millis：当前查询所需时间，毫秒数。
        indexBounds：当前查询具体使用的索引。
    2、使用 hint()
        虽然MongoDB查询优化器一般工作的很不错，但是也可以使用 hint 来强制 MongoDB 使用一个指定的索引。
        这种方法某些情形下会提升性能。 一个有索引的 collection 并且执行一个多字段的查询(一些字段已经索引了)。
        如下查询实例指定了使用 gender 和 user_name 索引字段来查询：
        >db.users.find({gender:"M"},{user_name:1,_id:0}).hint({gender:1,user_name:1})
        可以使用 explain() 函数来分析以上查询：
        >db.users.find({gender:"M"},{user_name:1,_id:0}).hint({gender:1,user_name:1}).explain()

四、原子操作
    mongodb不支持事务，所以，在你的项目中应用时，要注意这点。无论什么设计，都不要要求mongodb保证数据的完整性。
    但是mongodb提供了许多原子操作，比如文档的保存，修改，删除等，都是原子操作。
    所谓原子操作就是要么这个文档保存到Mongodb，要么没有保存到Mongodb，不会出现查询到的文档没有保存完整的情况。

    1、原子操作数据模型
        考虑下面的例子，图书馆的书籍及结账信息。
        实例说明了在一个相同的文档中如何确保嵌入字段关联原子操作（update：更新）的字段是同步的。
        book = {
                  _id: 123456789,
                  title: "MongoDB: The Definitive Guide",
                  author: [ "Kristina Chodorow", "Mike Dirolf" ],
                  published_date: ISODate("2010-09-24"),
                  pages: 216,
                  language: "English",
                  publisher_id: "oreilly",
                  available: 3,
                  checkout: [ { by: "joe", date: ISODate("2012-10-15") } ]
                }
        你可以使用 db.collection.findAndModify() 方法来判断书籍是否可结算并更新新的结算信息。
        在同一个文档中嵌入的 available 和 checkout 字段来确保这些字段是同步更新的:
        db.books.findAndModify ( {
           query: {
                    _id: 123456789,
                    available: { $gt: 0 }
                  },
           update: {
                     $inc: { available: -1 },
                     $push: { checkout: { by: "abc", date: new Date() } }
                   }
        } )
    2、原子操作常用命令
        $set
            用来指定一个键并更新键值，若键不存在并创建。
            { $set : { field : value } }
        $unset
            用来删除一个键。
            { $unset : { field : 1} }
        $inc
            $inc可以对文档的某个值为数字型（只能为满足要求的数字）的键进行增减的操作。
            { $inc : { field : value } }
        $push
            用法：{ $push : { field : value } }
            把value追加到field里面去，field一定要是数组类型才行，如果field不存在，会新增一个数组类型加进去。
        $pushAll
            同$push,只是一次可以追加多个值到一个数组字段内。
            { $pushAll : { field : value_array } }
        $pull
            从数组field内删除一个等于value值。
            { $pull : { field : _value } }
        $addToSet
            增加一个值到数组内，而且只有当这个值不在数组内才增加。
        $pop
            删除数组的第一个或最后一个元素
            { $pop : { field : 1 } }
        $rename
            修改字段名称
            { $rename : { old_field_name : new_field_name } }
        $bit
            位操作，integer类型
            {$bit : { field : {and : 5}}}
        偏移操作符
            > t.find() { "_id" : ObjectId("4b97e62bf1d8c7152c9ccb74"), "title" : "ABC", "comments" : [ { "by" : "joe", "votes" : 3 }, { "by" : "jane", "votes" : 7 } ] }
            > t.update( {'comments.by':'joe'}, {$inc:{'comments.$.votes':1}}, false, true )
            > t.find() { "_id" : ObjectId("4b97e62bf1d8c7152c9ccb74"), "title" : "ABC", "comments" : [ { "by" : "joe", "votes" : 4 }, { "by" : "jane", "votes" : 7 } ] }

五、高级索引
    考虑以下文档集合（users ）:
    {
       "address": {
          "city": "Los Angeles",
          "state": "California",
          "pincode": "123"
       },
       "tags": [
          "music",
          "cricket",
          "blogs"
       ],
       "name": "Tom Benzamin"
    }
    以上文档包含了 address 子文档和 tags 数组。

    1、索引数组字段
        假设我们基于标签来检索用户，为此我们需要对集合中的数组 tags 建立索引。
        在数组中创建索引，需要对数组中的每个字段依次建立索引。所以在我们为数组 tags 创建索引时，会为 music、cricket、blogs三个值建立单独的索引。
        使用以下命令创建数组索引：
            >db.users.ensureIndex({"tags":1})
            创建索引后，我们可以这样检索集合的 tags 字段：
            >db.users.find({tags:"cricket"})
            为了验证我们使用使用了索引，可以使用 explain 命令：
            >db.users.find({tags:"cricket"}).explain()
            以上命令执行结果中会显示 "cursor" : "BtreeCursor tags_1" ，则表示已经使用了索引。

    2、索引子文档字段
        假设我们需要通过city、state、pincode字段来检索文档，由于这些字段是子文档的字段，所以我们需要对子文档建立索引。
        为子文档的三个字段创建索引，命令如下：
            >db.users.ensureIndex({"address.city":1,"address.state":1,"address.pincode":1})
            一旦创建索引，我们可以使用子文档的字段来检索数据：
            >db.users.find({"address.city":"Los Angeles"})
            查询表达不一定遵循指定的索引的顺序，mongodb 会自动优化。所以上面创建的索引将支持以下查询：
            >db.users.find({"address.state":"California","address.city":"Los Angeles"})
            同样支持以下查询：
            >db.users.find({"address.city":"Los Angeles","address.state":"California","address.pincode":"123"})

六、索引限制
    1、额外开销
        每个索引占据一定的存储空间，在进行插入，更新和删除操作时也需要对索引进行操作。所以，如果你很少对集合进行读取操作，建议不使用索引。

    2、内存(RAM)使用
        由于索引是存储在内存(RAM)中,你应该确保该索引的大小不超过内存的限制。
        如果索引的大小大于内存的限制，MongoDB会删除一些索引，这将导致性能下降。

    3、查询限制
        索引不能被以下的查询使用：
            正则表达式及非操作符，如 $nin, $not, 等。
            算术运算符，如 $mod, 等。
            $where 子句
        所以，检测你的语句是否使用索引是一个好的习惯，可以用explain来查看。

    4、索引键限制
        从2.6版本开始，如果现有的索引字段的值超过索引键的限制，MongoDB中不会创建索引。

    5、插入文档超过索引键限制
        如果文档的索引字段值超过了索引键的限制，MongoDB不会将任何文档转换成索引的集合。与mongorestore和mongoimport工具类似。

    6、最大范围
        集合中索引不能超过64个
        索引名的长度不能超过128个字符
        一个复合索引最多可以有31个字段